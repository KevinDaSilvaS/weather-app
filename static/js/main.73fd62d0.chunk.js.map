{"version":3,"sources":["Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","queryManager","event","setState","query","target","value","manageEnter","url","state","key","fetch","mode","then","res","json","response","console","log","Object","resp","this","bgClass","weather","classes","wrapper","className","type","placeholder","onChange","onKeyPress","React","Component","App","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OA8EeA,E,kDA1EX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAcVC,aAAe,SAACC,GAEZ,EAAKC,SAAS,CAACC,MAAQF,EAAMG,OAAOC,SAjBtB,EAoBlBC,YAAc,SAACL,GACX,IAAMM,EAAG,2DAAuD,EAAKC,MAAML,MAAlE,wDAES,UAAdF,EAAMQ,KACNC,MAAMH,EAAK,CAACI,KAAM,SACjBC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACF,EAAKZ,SAAS,CAACa,SAASD,IACxBE,QAAQC,IAAIH,OAzBpB,EAAKN,MAAQ,IAAIU,OACjB,EAAKV,MAAML,MAAQ,GACnB,EAAKK,MAAMO,SAAW,CAAC,MAAQ,CAAC,KAAO,IAAK,IAAM,OAClD,QAAU,CAAC,CAAC,GAAK,IAAI,KAAO,SAAS,YAAc,kBAAkB,KAAO,QAC5E,KAAO,WAAW,KAAO,CAAC,KAAO,MAAM,WAAa,MAAM,SAAW,MAAM,SAAW,GACtF,SAAW,KAAK,SAAW,IAAI,WAAa,IAAM,KAAO,CAAC,MAAQ,IAAI,IAAM,KAC5E,OAAS,CAAC,IAAM,IAAI,GAAK,WAAW,IAAM,CAAC,KAAO,EAAE,GAAK,KAAK,QAAU,KACxE,QAAU,WAAW,OAAS,YAAY,SAAW,KAAK,GAAK,QAC/D,KAAO,SAAS,IAAM,KAXR,E,qDAkCd,IAAMI,EAAOC,KAAKZ,MAAMO,SAEpBM,EAAU,GACVF,EAAI,KAAJ,KAAuB,KACvBE,EAAU,QAGkB,SAA5BF,EAAKG,QAAQ,GAAb,OACAD,EAAU,QAGd,IAAME,EAAUC,WAAgBH,EAEhC,OACI,yBAAKI,UAAWF,GACZ,yBAAKE,UAAU,qCACX,0BAAMA,UAAU,OACZ,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,iBAAf,KACA,2BAAOA,UAAU,aAAaC,KAAK,OACnCC,YAAY,wBACZC,SAAUR,KAAKpB,aACf6B,WAAYT,KAAKd,eAGrB,yBAAKmB,UAAU,mBAIvB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,WAAWN,EAAKG,QAAQ,GAAb,MAC1B,6BAAK,wBAAIG,UAAU,eAAeN,EAAI,KAAJ,KAA7B,UACL,yBAAKM,UAAU,YAAYN,EAAI,KAA/B,IAA0CA,EAAI,IAAJ,e,GArExCW,IAAMC,W,MCgBbC,MAdf,WAEE,OACE,6BACE,6BACE,0BAAMC,IAAI,aAAaC,KAAK,sFAE9B,yBAAKT,UAAU,OACb,kBAAC,EAAD,SCAYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.73fd62d0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Weather extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = new Object();\r\n        this.state.query = \"\";\r\n        this.state.response = {\"coord\":{\"lon\":-0.13,\"lat\":51.51},\r\n        \"weather\":[{\"id\":804,\"main\":\"Clouds\",\"description\":\"overcast clouds\",\"icon\":\"04d\"}],\r\n        \"base\":\"stations\",\"main\":{\"temp\":19.43,\"feels_like\":15.88,\"temp_min\":18.89,\"temp_max\":20,\r\n        \"pressure\":1022,\"humidity\":40},\"visibility\":10000,\"wind\":{\"speed\":3.6,\"deg\":250},\r\n        \"clouds\":{\"all\":93},\"dt\":1589735657,\"sys\":{\"type\":1,\"id\":1414,\"country\":\"GB\",\r\n        \"sunrise\":1589688320,\"sunset\":1589744925},\"timezone\":3600,\"id\":2643743,\r\n        \"name\":\"London\",\"cod\":200};\r\n\r\n    }\r\n\r\n    queryManager = (event) =>{\r\n        \r\n        this.setState({query : event.target.value});\r\n    }\r\n\r\n    manageEnter = (event) =>{\r\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.query}&units=metric&APPID=0541fc99977dedf06658a396f208f654`;\r\n\r\n        if (event.key === \"Enter\") {\r\n            fetch(url, {mode: 'cors'})\r\n            .then(res=>res.json())\r\n            .then(json => {\r\n                this.setState({response:json})\r\n                console.log(json);\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const resp = this.state.response;\r\n        const wrapper = \"wrapper\";\r\n        let bgClass = \"\";\r\n        if (resp[\"main\"][\"temp\"] < 20) {\r\n            bgClass = \"cold\";\r\n        }\r\n\r\n        if (resp.weather[0][\"main\"] === \"Rain\") {\r\n            bgClass = \"rain\";\r\n        }\r\n\r\n        const classes = wrapper + \" \" + bgClass;\r\n\r\n        return(\r\n            <div className={classes}>\r\n                <div className=\"card card-content card-background\">\r\n                    <main className=\"row\">\r\n                        <div className=\"col s1 m1 l1\"></div>\r\n                        <div className=\" col s10 m10 l10\">\r\n                            <div className=\"center-align \">-</div>\r\n                            <input className=\"search-bar\" type=\"text\" \r\n                            placeholder=\"search for a location\" \r\n                            onChange={this.queryManager}\r\n                            onKeyPress={this.manageEnter}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col s1 m1 l1\"></div>\r\n                    </main>\r\n                    \r\n                </div>\r\n                <div className=\"location-box\">\r\n                    <div className=\"weather\">{resp.weather[0][\"main\"]}</div>\r\n                    <div><h1 className=\"temperature\">{resp[\"main\"][\"temp\"]}Â°C</h1></div>\r\n                    <div className=\"location\">{resp[\"name\"]},{resp[\"sys\"][\"country\"]}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\nimport Weather from './Components/Weather.js'\nimport './Components/Weather.css'\n\nfunction App() {\n\n  return (\n    <div>\n      <div>\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" />\n      </div>\n      <div className=\"App\">\n        <Weather></Weather>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}